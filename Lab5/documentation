https://github.com/916-Serban-Cristian/FLCD/tree/main/Lab5

The class FiniteAutomaton implements operations on an automaton read from a file.
In the constructor the fa.in file is parsed using regex and keys. It contains the states, alphabet, transitions, out states and input state of the automaton.
The method checkAcepted returns true if the provided word is accepted by the automaton.
The method checkDeterministic returns true if the read automaton is a DFA.
There is also a method getSubstringAccepted which returns the longest accepted prefix of a given word. This is used to replace the regexes that match int constant and identifiers in the scanner.
The main data structure used to store the finite automaton is a list of strings. There is a list for states, the alphabet, the output states and the transitions. The initial state is stored as a string.
The transition is a record class which contains three strings: from state, to state and the label.
The checkAccepted method starts in the initial state and for each letter of a given word it checks if there is a transition that starts from that state and its label is the letter in the word. If no suitable transition is found or the final state is not an output state then the word is not accepted, otherwise it is.
The checkDeterministic method creates a hash table with states as keys and another hash table as values. The second hash tables have transition labels (the alphabet) as keys and a set of states (all the states into which they first key states goes with label second key). If any of them have more than 1 entry, it's not a DFA.

EBNF form of input file for FA:

nzdigit = 1|2| .. |9
digit = 0|1|..|9
number = non_zero_digit{digit}
letter = a|b|..|z|A|B..|Z
character = letter | digit
listOfCharacters = {character} {"," character}
firstLine = "states" "=" "{" listOfCharacters "}"
secondLine = "in_state" "=" {character}
thirdLine = "out_states" "=" "{" listOfCharacters "}"
fourthLine = "alphabet" "=" "{" listOfCharacters "}"
triple = "(" {character} "," {character} "," {character} ")"
fifthLine = "transitions" "=" "{" triple ";" triple} "}"
inputFile = firstLine "\n" secondLine "\n" thirdLine "\n" fourthLine "\n" fifthLine
