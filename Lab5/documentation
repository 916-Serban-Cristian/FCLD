https://github.com/916-Serban-Cristian/FLCD/tree/main/Lab5

Write a program that:

1. Reads the elements of a FA (from file).

2. Displays its elements, using a menu: the set of states, the alphabet, all the transitions, the initial state and the set of final states.

3. For a DFA, verifies if a sequence is accepted by the FA.

The class FiniteAutomaton implements operations on an automaton read from a file.
In the constructor the fa.in file is parsed using regex and keys. It contains the states, alphabet, transitions, out states and input state of the automaton.
The method checkAcepted returns true if the provided word is accepted by the automaton. 
There is also a method getSubstringAccepted which returns the longest accepted prefix of a given word. This is used to replace the regexes that match int constant and identifiers in the scanner.
The main data structure used to store the finite automaton is a list of strings. There is a list for states, the alphabet, the output states and the transitions. The initial state is stored as a string.
The transition is a record class which contains three strings: from state, to state and the label.
The checkAccepted method starts in the initial state and for each letter of a given word it checks if there is a transition that starts from that state and its label is the letter in the word. If no suitable transition is found or the final state is not an output state then the word is not accepted, otherwise it is.


EBNF form of input file for FA:

nzdigit = 1|2| .. |9
digit = 0|1|..|9
number = non_zero_digit{digit}
letter = a|b|..|z|A|B..|Z
character = letter | digit
listOfCharacters = {character} {"," character}
firstLine = "states" "=" "{" listOfCharacters "}"
secondLine = "in_state" "=" {character}
thirdLine = "out_states" "=" "{" listOfCharacters "}"
fourthLine = "alphabet" "=" "{" listOfCharacters "}"
triple = "(" {character} "," {character} "," {character} ")"
fifthLine = "transitions" "=" "{" triple ";" triple} "}"
inputFile = firstLine "\n" secondLine "\n" thirdLine "\n" fourthLine "\n" fifthLine
