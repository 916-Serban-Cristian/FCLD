array_statement assign_statement condition expression expression_list function_call_statement function_name identifier_list if_statement int_expression math_operator maybe_equal_expression positive_number program pure_identifier_list relational_operator return_statement statement string_expression int_statement char_statement type while_statement
" ( ) * + , - / ; < <= = == > >= char digit else epsilon int if print read return while { } identifier int_constant string_constant
program
program -> statement ; statement ; statement ; statement ; statement ; statement ; statement ; statement ;
statement -> int_statement
statement -> assign_statement
statement -> while_statement
statement -> function_call_statement
int_statement -> int identifier
expression -> identifier math_operator int_constant
expression -> identifier math_operator identifier
assign_statement -> identifier = expression
assign_statement -> identifier = int_constant
condition -> identifier relational_operator identifier
while_statement -> while ( condition ) { statement ; statement ; statement ; statement ; }
function_call_statement -> function_name ( identifier )
function_call_statement -> function_name ( )
function_name -> print
function_name -> read
math_operator -> +
math_operator -> -
math_operator -> *
math_operator -> /
relational_operator -> ==
relational_operator -> <
relational_operator -> <=
relational_operator -> >
relational_operator -> >=